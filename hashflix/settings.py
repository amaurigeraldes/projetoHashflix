"""
Django settings for hashflix project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Mostra o caminho da pasta onde se encontra o projeto, neste caso a pasta HASHFLIX (meu Ambiente Virtual)
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)=))+45orbc0s%ww$f56n(cp7m-wsr(j$l!(ekb_=1%mw39&lv'

# ==================================================================================================
# INSTALAR NO TERMINAL AS BIBLIOTECAS ABAIXO PARA A CONFIGURAÇÃO DO SERVIDOR
# 1) Permite gerenciar as requisições com o nosso sistema
# pip install gunicorn
# 2) Permite gerenciar os nossos arquivos estáticos (pasta static)
# pip install whitenoise
# CRIAR OS ARQUIVOS ABAIXO
# 3) Salvando todas as Bibliotecas e as Versões utilizadas no Projeto no arquivo requirements.txt
# pip freeze > requirements.txt
# 4) Salvando a Versão do Python que está sendo utlizada no arquivo runtime.txt
# python-3.12.4
# 5) Criar o arquivo Procfile (sem extensão) e salvar nele
# web: python manage.py migrate && gunicorn hashflix.wsgi --log-file -
# CRIANDO O BANCO DE DADOS QUE SUBSTITUIRÁ O SQLITE3 NO SERVIDOR
# 6) Instalando a biblioteca que permite o Django se conectar com o database-url
# pip install dj-database-url
# 7) Instalando a biblioteca do POSTGRES
# pip install psycopg2
# ==================================================================================================

# **************************************************************************************************
# SECURITY WARNING: Don't run with debug turned on in production!
if os.getenv("PRODUCTION_DEBUG"):
    # Don't modify this constant!
    DEBUG = False
else:
    # Local impact: Modify this constant!
    DEBUG = False
    
if DEBUG:
    print("⚠️ Warning: LOCAL DEBUG Mode is Active!!")


# SECURITY WARNING: don't run with debug turned on in production!
# Faz a atualização imediata das alterações realizadas no projeto refletirem no Navegador
# DEBUG = True

# ALLOWED_HOSTS = []
# Quando o Site já estiver no ar, substituir o "*" pelo Link definido 
ALLOWED_HOSTS = ["*"]

# **************************************************************************************************

# Application definition
# Relação dos APPs (padrão do Djando) que estão instalados e os que estamos criando/adicionando
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'filme',
    'crispy_forms',
    'crispy_bootstrap5',
]

# Incluir o "whitenoise.middleware.WhiteNoiseMiddleware" após o security
# Pegar na documentação do whitenoise em https://whitenoise.readthedocs.io/en/latest/
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Arquivo com a base de links que gerencia os links do site (as urls)
ROOT_URLCONF = 'hashflix.urls'

# Onde ficarão os arquivos HTML e CSS
# 'DIRS': ['templates'] - criar uma pasta templates global em um diretório padrão (fora do APP), funcionando para a criação de uma Estrutura Base para ser replicada em cada uma das páginas (APPs) que forem criadas posteriormente e fazendo somente as adaptações para cada caso
# 'APP_DIRS': True - criar uma pasta templates específica (dentro da APP)
# Obs.: o nome destas pasta deverá ser exatamente templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'filme.new_context.lista_filmes_recentes',
                'filme.new_context.lista_filmes_emalta',
                # 'filme.new_context.filme_destaque',
            ],
        },
    },
]

# Configuração de Servidor
WSGI_APPLICATION = 'hashflix.wsgi.application'


# Define o Banco de Dados Padrão (no caso é o sqlite3), o nome e o local
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Importando a biblioteca que permite o Django se conectar com o database-url
# Ver documentação: https://pypi.org/project/dj-database-url/
import dj_database_url


# Criando uma variável de ambiente (existe somente no Servidor) que passa o link do banco de dados
# Obs.1: caso a biblioteca os ainda não tenha sido importada: import os
# Obs.2: usando o getenv() e passando como parâmetro a variável de ambiente do BD criado no Railway
DATABASE_URL = os.getenv("DATABASE_URL")


# Configuração do banco de dados
DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
}





# Quais são os validadores de senha que o Django vai gerenciar
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# Declarando que a Tabela que gerenciará os Usuários não é a Padrão
# Obs.: passando o APP (filme) e a Classe (Usuario) que foi criada em models.py
AUTH_USER_MODEL = "filme.Usuario"


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Define o idioma e o fuso horário
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Definindo a variável com o caminho onde os arquivos de imagem, CSS e JavaScript serão armazenados
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'


# Definindo uma Pasta os arquivos estáticos (conforme pede o whitenoise)
STATIC_ROOT = BASE_DIR / "staticfiles"


# Criar uma Pasta dentro do Projeto onde serão armazenadas as imagens 
# Obs.1: Podemos criar também as Sub-pastas CSS, JavaScript, Images para separar por tipos 
# Obs.2: obter o código abaixo no link da documentação
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Definindo a variável com o caminho onde os arquivos de media serão armazenados
MEDIA_URL = 'media/'

# Definindo uma Pasta
MEDIA_ROOT = BASE_DIR / "media"


# Define as chaves primárias das Tabelas dos Bancos de Dados
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Definindo um Link para direcionamento quando o usuário fizer o login
LOGIN_REDIRECT_URL = 'filme:homefilmes'


# Página onde o usuário fará o Login
LOGIN_URL = 'filme:login'


# Definindo 02 Constantes do CRISPY FORMS COM BOOTSTRAP5 conforme documentação https://github.com/django-crispy-forms/crispy-bootstrap5
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

